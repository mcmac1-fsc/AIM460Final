# -*- coding: utf-8 -*-
"""side tesr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K7nDlkq_HGNwHe9D2Fyurr-QlboopeVv
"""

def score_v19(narrative: str, df: pd.DataFrame) -> List[Dict]:
    """
    V19 Scoring: Uses fixed points and a large, non-negotiable +50 boost for CJI certainty.
    """
    narrative_tokens = tokenize(narrative)
    results = []

    # Check for Explicit and Ambiguous Claims in the Narrative once
    has_explicit_cji = any(k in narrative_tokens for k in CJI_DEFINITIONS_V19['EXPLICIT'])
    has_ambiguous_claim = any(k in narrative_tokens for k in CJI_DEFINITIONS_V19['AMBIGUOUS'])

    # 1. Base Score Calculation (Fixed Point System)
    for _, row in df.iterrows():
        base_score = 0

        # Combine Statute and CJI tokens into a single pool for matching
        combined_corpus = tokenize(row['Element_Text']).union(tokenize(row['CJI_TEXT']))

        for token in combined_corpus:
            if token in narrative_tokens and token in HIGH_VALUE_KEYWORDS:
                # Fixed +20 points for any high-value match
                base_score += 20

        # 2. Certainty Boost and Flagging
        final_score = base_score
        flag = None

        # Add a fixed, large boost for explicit legal certainty (CJI terms)
        # Apply boost to Assaults and Strangulation if explicit CJI is present in the narrative
        if has_explicit_cji and ('ASSAULT' in row['Charge'] or 'STRANGULATION' in row['Charge']):
            final_score += 50

        # Final score scaling (Max possible score is around 120, so 100 is a safe cap)
        final_score = min(100, final_score)

        # Flagging logic
        if row['Charge'] == 'ASSAULT_3' and not has_explicit_cji and has_ambiguous_claim:
            flag = "[FLAG: AMBIGUITY - PI DEFINITION UNCLEAR]"

        results.append({
            'Suggested Charge': row['Charge'] + (f" | {flag}" if flag else ""),
            'Confidence Score (V19)': final_score,
            'Basis': row['Element_Text'] # <<< CRITICAL FIX: RE-INSERTED 'Basis' KEY
        })

    results.sort(key=lambda x: x['Confidence Score (V19)'], reverse=True)
    return results

# Note: You only need to re-execute this function definition and then the final run block.

import pandas as pd
import re
from typing import List, Dict, Any

# =========================================================================
# === V19: CJI AND DATA SETUP =============================================
# =========================================================================

V19_data = {
    'Charge': ['STRANGULATION_1', 'STRANGULATION_2', 'ASSAULT_1', 'ASSAULT_2', 'ASSAULT_3', 'HARASSMENT_2'],
    'Element_Text': [
        'Intentional obstruction of breathing or blood flow causing serious physical injury.',
        'Intentional obstruction of breathing or blood flow causing stupor, unconsciousness, or any physical injury/impairment.',
        'Intentionally causing serious physical injury with a deadly weapon or dangerous instrument.',
        'Intentionally causes serious physical injury.',
        'Intentionally causes physical injury.',
        'Intentional minor physical contact (strikes, shoves, kicks) or a course of conduct that seriously annoy or alarm and serves no legitimate purpose.'
    ],
    'CJI_TEXT': [ # Key terms for high match
        'obstruction breathing serious injury fracture broken disfigurement',
        'obstruction breathing stupor unconsciousness impairment pain swelling bruise',
        'serious injury deadly weapon dangerous instrument fracture broken disfigurement',
        'serious physical injury fracture broken disfigurement',
        'physical injury impairment substantial pain swelling bruise cut',
        'minor physical contact strikes shoves kicks annoy alarm'
    ]
}
v19_df = pd.DataFrame(V19_data)

# CRITICAL V19: Simplified, robust point system
HIGH_VALUE_KEYWORDS = ['choked', 'obstruction', 'cut', 'swelling', 'fracture', 'broken', 'serious', 'physical', 'injury', 'hit', 'pain', 'dizzy', 'unconsciousness']

CJI_DEFINITIONS_V19 = {
    'EXPLICIT': ['cut', 'swelling', 'fracture', 'broken'], # Triggers +50 certainty boost
    'AMBIGUOUS': ['hurt badly', 'traumatized', 'painful']
}

# =========================================================================
# === V19: CORE FUNCTIONS =================================================
# =========================================================================

def tokenize(text: str) -> set:
    """Simple BoW tokenization."""
    return set(re.findall(r'\b\w+\b', text.lower()))

def score_v19(narrative: str, df: pd.DataFrame) -> List[Dict]:
    """
    V19 Scoring: Uses fixed points and a large, non-negotiable +50 boost for CJI certainty.
    """
    narrative_tokens = tokenize(narrative)
    results = []

    # Check for Explicit and Ambiguous Claims in the Narrative once
    has_explicit_cji = any(k in narrative_tokens for k in CJI_DEFINITIONS_V19['EXPLICIT'])
    has_ambiguous_claim = any(k in narrative_tokens for k in CJI_DEFINITIONS_V19['AMBIGUOUS'])

    # 1. Base Score Calculation (Fixed Point System)
    for _, row in df.iterrows():
        base_score = 0

        # Combine Statute and CJI tokens into a single pool for matching
        combined_corpus = tokenize(row['Element_Text']).union(tokenize(row['CJI_TEXT']))

        for token in combined_corpus:
            if token in narrative_tokens and token in HIGH_VALUE_KEYWORDS:
                base_score += 20

        # 2. Certainty Boost and Flagging
        final_score = base_score
        flag = None

        if has_explicit_cji and ('ASSAULT' in row['Charge'] or 'STRANGULATION' in row['Charge']):
            final_score += 50

        final_score = min(100, final_score)

        # Flagging logic
        if row['Charge'] == 'ASSAULT_3' and not has_explicit_cji and has_ambiguous_claim:
            flag = "[FLAG: AMBIGUITY - PI DEFINITION UNCLEAR]"

        results.append({
            'Suggested Charge': row['Charge'] + (f" | {flag}" if flag else ""),
            'Confidence Score (V19)': final_score,
            'Basis': row['Element_Text'] # <<< CRITICAL FIX HERE
        })

    results.sort(key=lambda x: x['Confidence Score (V19)'], reverse=True)
    return results

# =========================================================================
# === V19: FINAL VERIFICATION RUN (Expected Results) ======================
# =========================================================================

print("\n\n#####################################################################")
print("### HA-RAG V19: ABSOLUTE SCORE (Colab-Proof) MODEL (1-100 SCALE) ###")
print("#####################################################################")

# --- TEST Z-1: Vague PI Claim (Expected: STRANGULATION_2 ~70, ASSAULT_3 Flagged) ---
test_narrative_Z1 = "He choked me until I felt dizzy, and then he hit me which hurt badly and caused a lot of pain. I'm traumatized."
results_Z1 = score_v19(test_narrative_Z1, v19_df)

print(f"\n--- TEST Z-1 (V19): Vague PI Claim ---")
for result in results_Z1:
    print(f"Suggested Charge: {result['Suggested Charge']} (Confidence Score: {result['Confidence Score (V19)']})")
    print(f"   Basis: {result['Element_Text']}")
    print("-" * 20)

# --- TEST Z-2: Explicit PI Claim (Expected: ASSAULT_3 score: > 70) ---
test_narrative_Z2 = "He hit me and it caused a cut and swelling on my arm."
results_Z2 = score_v19(test_narrative_Z2, v19_df)

print(f"\n--- TEST Z-2 (V19): Explicit PI Claim ---")
for result in results_Z2:
    print(f"Suggested Charge: {result['Suggested Charge']} (Confidence Score: {result['Confidence Score (V19)']})")
    print(f"   Basis: {result['Element_Text']}")
    print("-" * 20)